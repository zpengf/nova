/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated._127local;
import org.jooq.generated.tables.records.Demo1Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * ces 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Demo1 extends TableImpl<Demo1Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>127local.demo1</code>
     */
    public static final Demo1 DEMO1 = new Demo1();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Demo1Record> getRecordType() {
        return Demo1Record.class;
    }

    /**
     * The column <code>127local.demo1.id</code>.
     */
    public final TableField<Demo1Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>127local.demo1.name</code>.
     */
    public final TableField<Demo1Record, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("carina", SQLDataType.VARCHAR)), this, "");

    private Demo1(Name alias, Table<Demo1Record> aliased) {
        this(alias, aliased, null);
    }

    private Demo1(Name alias, Table<Demo1Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("ces "), TableOptions.table());
    }

    /**
     * Create an aliased <code>127local.demo1</code> table reference
     */
    public Demo1(String alias) {
        this(DSL.name(alias), DEMO1);
    }

    /**
     * Create an aliased <code>127local.demo1</code> table reference
     */
    public Demo1(Name alias) {
        this(alias, DEMO1);
    }

    /**
     * Create a <code>127local.demo1</code> table reference
     */
    public Demo1() {
        this(DSL.name("demo1"), null);
    }

    public <O extends Record> Demo1(Table<O> child, ForeignKey<O, Demo1Record> key) {
        super(child, key, DEMO1);
    }

    @Override
    public Schema getSchema() {
        return _127local._127LOCAL;
    }

    @Override
    public Identity<Demo1Record, Integer> getIdentity() {
        return (Identity<Demo1Record, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<Demo1Record> getPrimaryKey() {
        return Keys.KEY_DEMO1_PRIMARY;
    }

    @Override
    public List<UniqueKey<Demo1Record>> getKeys() {
        return Arrays.<UniqueKey<Demo1Record>>asList(Keys.KEY_DEMO1_PRIMARY);
    }

    @Override
    public Demo1 as(String alias) {
        return new Demo1(DSL.name(alias), this);
    }

    @Override
    public Demo1 as(Name alias) {
        return new Demo1(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Demo1 rename(String name) {
        return new Demo1(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Demo1 rename(Name name) {
        return new Demo1(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
